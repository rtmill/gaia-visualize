leaflet(maine) %>%
addPolygons(
stroke=FALSE, fillOpacity=0.5, smoothFactor = 0.5,
color = ~pal(PDV)
) %>%
addLegend("bottomright", pal=pal, values=~PDV)
# -----------------------------------
# Add PDV to polygons df
counties$PDV <- with(cAttr, cAttr$Premature.death.Value[match(counties$geoid, cAttr$geoid)])
counties$PoorHealthDays <- with(cAttr, cAttr$Poor.or.fair.health.Value[match(counties$geoid, cAttr$geoid)])
# get subset of maine, nh and vermont (for testing subsets in function)
newEngland <- startsWith(counties$geoid, "23") | startsWith(counties$geoid, "33") | startsWith(counties$geoid, "50")
# Make function to display different maps
# Inputs : polygons, attribute(layer), subset, palette, grouping function (Bin, etc)
makeMap <- function(polys, attr, subset, colorChoice, colorFunction){
# subset the polygons
polys <- polys[subset,]
# Save column of interest as variable (used multiple times)
layer <-  polys[[attr]]
pal <- colorFunction(
palette = colorChoice,
domain = layer
)
leaflet(polys) %>%
addProviderTiles("CartoDB.Positron", group= "CartoDB Positron") %>%
addPolygons(
stroke=FALSE, fillOpacity=0.5, smoothFactor = 0.5,
color = ~pal(layer)
) %>%
addLegend("bottomright", pal=pal, values= layer, title=attr)
}
makeMap(counties, "PDV", newEngland, "Reds", colorBin)
makeMap(counties, "PoorHealthDays", newEngland, "Blues", colorBin)
# ---- Sandbox, ignore
library(postGIStools)
library(RPostgreSQL)
con <- dbConnect(PostgreSQL(), dbname = "gis",
user = "gis_user",
host = "localhost",
password = "motech")
query <- "select * from region.mapping"
res <- dbGetQuery(con, query)
attrTable <- res[1,2]
query <- paste("select * from region.",attrTable, sep="")
attr <- dbGetQuery(con, query)
polyTable <- res[1,3]
query <- paste("select geoid, geom from public.", polyTable, sep="")
poly <- get_postgis_query(con, query,  geom_name = "geom")
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?leafletProxy
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?tabBoc
?tabBox
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
?menuItem
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?downloadHandler
runApp()
runApp()
runApp()
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="cdm", host="localhost", user="ohdsi_user", password="motech")
dbListTables(con)
library(rgdal)
library(rgeos)
library(RODBC)
# Access database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="cdm", host="localhost", user="ohdsi_user", password="motech")
dbListTables(con)
runApp()
con <- dbConnect(PostgreSQL(), dbname = "gis",
user = "gis_user",
host = "localhost",
password = "motech")
dbListTables(con)
query <- "SELECT * FROM location"
locs <- dbGetQuery(con, query)
dbWriteTable(con, "working.location_output", cAttr,  row.names=FALSE)
?dbWriteTable
dbWriteTable(con, c("working", "location_output"), cAttr,  row.names=FALSE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Save column of interest as variable (used multiple times)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
library(postGIStools)
?postGIStools
query <- "select geoid, geom from public.cb_2015_us_county_20m"
poly <- get_postgis_query(con, query,  geom_name = "geom")
runApp()
con <- dbConnect(PostgreSQL(), dbname = "gis",
user = "gis_user",
host = "localhost",
password = "motech")
poly <- get_postgis_query(con, query,  geom_name = "geom")
dbWriteTable(con, c("working", "testTable"), poly,  row.names=FALSE)
runApp()
library(rgdal)
?writeOGR
writeOGR(poly, dsn)
query <- "create table testTable";
j <- get_postgis_query(con query)
j <- get_postgis_query(con, query)
?postGIStools
library(GISTools)
library(rgdal)
writeOGR(obj=poly, dsn="tempdir", layer="torn", driver="ESRI Shapefile")
?writeOGR
library(GISTools)
library(rgdal)
writeOGR(obj=poly, dsn="C:\Desktop", layer="torn", driver="ESRI Shapefile")
library(GISTools)
library(rgdal)
writeOGR(obj=poly, dsn="C:/Desktop", layer="torn", driver="ESRI Shapefile")
library(GISTools)
library(rgdal)
writeOGR(obj=poly, dsn="C:\Users\rmiller\Desktop", layer="torn", driver="ESRI Shapefile")
library(GISTools)
library(rgdal)
writeOGR(obj=poly, dsn="C:/Users/rmiller/Desktop", layer="torn", driver="ESRI Shapefile")
library(GISTools)
library(rgdal)
writeOGR(obj=poly, dsn="C:/Users/rmiller/Desktop/repo", layer="torn", driver="ESRI Shapefile")
m <- readOGR("C:/Users/rmiller/Desktop/repo",)
?readOGR
m <- readOGR("C:/Users/rmiller/Desktop/repo", layer="torn")
?rgdal
??rgdal
ogrInfo("C:/Users/rmiller/Desktop/repo")
?ogrListLayers("C:/Users/rmiller/Desktop/repo")
ogrListLayers("C:/Users/rmiller/Desktop/repo")
runApp()
runApp()
runApp()
library(maptools)
writeSpatialShape(poly, "poly")
getwd()
?writeSpatialShape
writeSpatialShape(poly, "C:/Users/rmiller/Desktop/repo/poly")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
repoLocation <- "C:/Users/rmiller/Desktop/repo/"
?readOGR
library(rgdal)
jj <- readOGR(dsn = repoLocation, layer= yyyy)
jj <- readOGR(dsn = repoLocation, layer= "yyyy")
jj <- readOGR(dsn = repoLocation, layer= "torn")
jj <- readOGR(repoLocation, layer= "torn")
jj <- readOGR( "C:/Users/rmiller/Desktop/repo/", layer= "torn")
library(shiny)
library(leaflet)
library(postGIStools)
library(RPostgreSQL)
library(maptools)
library(shiny)
library(leaflet)
library(postGIStools)
library(RPostgreSQL)
library(maptools)
jj <- readOGR( "C:/Users/rmiller/Desktop/repo/", layer="torn")
jj <- readOGR( "C:/Users/rmiller/Desktop/repo", layer="torn")
jj <- readOGR( "C:/Users/rmiller/Desktop/repo", layer="yyyy")
runApp()
runApp()
runApp()
runApp()
ogrListLayers("C:/Users/rmiller/Desktop/repo")
p<- ogrListLayers("C:/Users/rmiller/Desktop/repo")
p
p[1]
class(p)
p
p[[]]
p[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
con <- dbConnect(PostgreSQL(), dbname = "gis",
user = "gis_user",
host = "localhost",
password = "motech")
query <- "select * public.cb_2015_us_county_20m"
poly <- get_postgis_query(con, query,  geom_name = "geom")
query <- "select * from public.cb_2015_us_county_20m"
poly <- get_postgis_query(con, query,  geom_name = "geom")
query <- "select *, geom from public.cb_2015_us_county_20m"
poly <- get_postgis_query(con, query,  geom_name = "geom")
polyTable <- "cb_2015_us_county_20m"
query <- paste("select geoid,name, geom from public.", polyTable, sep="")
poly <- get_postgis_query(con, query,  geom_name = "geom")
runApp()
runApp()
con <- dbConnect(PostgreSQL(), dbname = "gis",
user = "gis_user",
host = "localhost",
password = "motech")
query <- "select * from region.mapping"
res <- dbGetQuery(con, query)
polyTable <- res[1,3]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addPopups
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
locGeo <- read.csv("C:/Users/rmiller/Desktop/locGeo.csv")
View(locGeo)
x <- locGeo
library(rgdal)
library(rgeos)
library(RODBC)
# Access database
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname="cdm", host="localhost", user="gis_user", password="motech")
dbListTables(con)
query <- "DROP TABLE location"
tmp <- dbGetQuery(con, query)
# write table to database
dbWriteTable(con, "location", x,  row.names=FALSE)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?dashboardHeader
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?switch
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rgdal)
tmp <- readOGR("C:/Users/rmiller/Desktop/repo/", "gggg" )
tmp <- readOGR("C:/Users/rmiller/Desktop/repo/", layer="gggg" )
tmp <- readOGR("C:/Users/rmiller/Desktop/repo", layer="gggg" )
runApp()
repoLocation <- "C:/Users/rmiller/Desktop/repo"
k <- readOGR(repoLocation, layer="gggg")
runApp()
runApp()
runApp()
runApp()
runApp()
?readOGR
runApp()
runApp()
shiny::runApp()
runApp()
k <- readOGR(repoLocation, layer="poly")
k <- readOGR(repoLocation, layer="torn")
k <- readOGR(repoLocation, layer="yyyy")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
